<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="backgroundWorker1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ/gAl/4sAAiX4AAIh9gACMPMAAwT9AAII
        /QAAAP8ABhT4AAYV9gABC/QAAw/0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADB/kAA3LdAAZL6gACKfYJAyP2CAIr
        9AAAHe0AWJ6hABEq5wAEIO8HBSHtCAIZ6gEDHOoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAv8AChX/AAkT/gACPPAAAzrwHAM6
        8F8DKfUXAAD/AAAA+AAKIfMACRz1Ewgr7VwFKulTAh3rCwMg6gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcn+QALL/sADgD/AQwA
        /wEFOPIpAzjxHQc98TQKMvQaCDz0AANG7AANAP8ECxX2CwQN9gUKi+AABCHyAAAA/wABCvsABQv9AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABSH6AAM3
        9QEKQPctCzP6DAAA2wIIUu5dBU7wfgYZ+gkEO/YaAkLtPARC7VAFQexPBTvuPAQ07R4CFfIGBkvlAAQx
        7QAAAP8AAhb7AAME/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAADIvwABC77BQY5+DoCH/wLCVj2YAhc8MsDTPVYBFbxigRZ8NUFWvDzBlXt/QVR6v0ETOv1CEjp3QlA
        6KoFOetdBC3uGAxdzAAGKu8ADlTfAAAJ/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAwT/AAMq/QADQPoFBE34Qwhc9VMJafLnCF/0zARl89kEdPD/Bn3w/wdy7/kGXO/cA1XsxgVO
        7tQJTOvoB0rq/wJH6v4FQOjMCDfkaAUp7xQSatoAAQ35AAAD/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAwAAAAQAAAACAAAAAAsAA2PdAANZ9icGXfV8B3HzzAd08f8IcvT7CYb1/weH9fIHbPOmBFjvUAZE
        9R8AMfwPBzT3Qwk39ksDQ/BlA0jtyAVI6f8IPOjOBSXvVQAA/wUBF8wABAAAAAMCAAADAQEAAwEBAAAA
        AAAAAAAAAwIAAAAFAAD///8AAAAAAQAAAAEAAMQKAl72bwV289QFfPb9Anj2/wWD9P8JgPfVA2DwUgAC
        1gdLu/8A////AAAAAAAAAHECAADBBEGr/wADNesZBz/rjQo/69oHMO9XAB7rLwAOvgkAAAABAAAAAP//
        /wAAAAAAAAAAAAAAAAADAgAAAAAAAAAAAAMyNTIsV1hTVjtGdGgUXrnGIH3B/xVww/8Tbsv/CW/U3SZS
        m24+Ny87IyEdKz8+PDxGRUNJU1NQUyAfHCo3NTMyOTc2OBgTBh45O01AG0CxqAk7y9EaNaKOIjSHdVdV
        UFMxMC4sAAAABAAAAAAAAAAAAAAAAAMCAAAgHRsACggFF5mZlquAf33Gl5ic4197kPp+jpv/h5am/2d8
        lf9VZHu6joqLxISDgch2dHOzhYSDu42Mi8eFhYLPg4N/soSCgriAf33GY2Jfm42NiMR9fHzCRFSK1puc
        rex9gInYiomI3ZOSkbAbGhkbMTAuAAAAAAAAAAAAAQEBAFRPSwBAPTouo6CcyzY1MnWCi5DUan6Q/1B5
        l/9zkaD/YG1/45+envGLiYjMhYSCzKSjovVfXVyciYiHvUlHRo2TkY/SiomJ3W9tbL+hoZ3ziIeExXt5
        d8WYlZPno6Ki811cZcp8fHrbpqel1TQ1MypMTUsAAQAAAAAAAAABAQEANTIwACYlIyGdm5rBV1VViUBZ
        c7xjfZT+W46o/26UpfxYV1yepqak43FxbqKMionAiYiG7X17eqyTko/BYmBeppqWk9eQjo3cWllZmKmo
        pudqaWeZoJ6bxaifk+x8eHrgfYGU9ZKSjep2d3W7GRoZICssKgABAAAABAABAAAAAAAAAAAAAAAAB2pp
        aWKRjY28fYqZzFGEo/lTnrr/WZWz5FRPTl2LjYmTUVNQW4ODgpGNjIvFbm5te4KCf5KKiYe7f3x5l3R0
        c4xNTU1bjoyNlkxKS1aIiYqOm3xKs5+HXspYXoS0hYeNzomKiJ0gIiEWICMiAAAEAwAALyUAAAAAAAAA
        AAgAAAAcAAAAKw4JBTsEI1BXIIjF5D6m0f8feLSkAAAAJwAAACMAAAAcAAAALAUGBjgAAAArAAAAMwQE
        BD4AAAAtAAAAHwAAABQAAAApAAAAGgAAAB2xezF805s2wTUhTzoJD0hLAgEANQAAACMAAAAWAAAABAAA
        AADf2toATElJMqGenbiZmJjAc3Fwm5uancRriZ/yepur/5SeqNx5d3ake3l5kGxra4GIh4iifX18nHh4
        d6ahnp2/lpWUu3l5eKR2eHdzOjk4SqKhn7VdXltUcnRyYpqPd9qrkmPxa0EQY4+PkJ2Bf3+0m5uaw4SG
        hpknKikXQ0hHAPv08gBXU1NHt7Kx619dW7x2dHO8qKam1jNgeMGdrLL/eXZzzV1bW6+WlJTepaOi47Gv
        r++Qj47fiYiH27Gtq+9WVFOzf358wXx9e7qWlpTC0dDO/V1cW2qOj4+NpqKV/56XhP+Mg3LXsrKv5YmH
        htahoJ/PSEpKXCYpKBBGTEsA8+/qAE5MS0XBvrvrkpGP1YGAf8enoqC6BkJ3b56yvfikop7hcnBxvK2r
        q/KoqKXkf318y7WxsPiCgH/Xu7m38YuJiM6DgH/EpqSi76qopuibmpnmWlhXaoSDhY6tpZr/no96/6qm
        ov+enpvNfHp5sp6dnK8AAAAQAAAAAP///wD28+sAVVNRRbq3s+pgX164eHh5vK+jnNQuHShSqrK54Ht7
        d8xSUlCm09PS+pOUlKRGRURo1tPQ9YqLiN2urqvuWFZTr4OAfr/b2NX7YmBflZuamcxraminl5WWwr23
        r/+IeWP/xsPA/4GCgJuKiIiipqSktAAAAA8BAQEAAAgDANza1gBLSkkyoJ+dtZubmrx2d3iglX1wo4Y3
        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
        AB/8AAAf/AAAP/4AAD//gAA///AAP///A/8=
</value>
  </data>
</root>